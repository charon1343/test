
// _Argos_settingDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "_Argos_setting.h"
#include "_Argos_settingDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// C_Argos_settingDlg 대화 상자




C_Argos_settingDlg::C_Argos_settingDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(C_Argos_settingDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	m_fileserver_ip = _T("");
	m_license_path = _T("");
	m_saveformat = _T("");
	m_site_code = _T("");
	m_site_name = _T("");
	m_server_ip = _T("");
}

void C_Argos_settingDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT_fileserver_ip, m_fileserver_ip);
	DDX_Text(pDX, IDC_EDIT_license_path, m_license_path);
	DDX_Text(pDX, IDC_EDIT_saveformat, m_saveformat);
	DDX_Text(pDX, IDC_EDIT_site_code, m_site_code);
	DDX_Text(pDX, IDC_EDIT_site_name, m_site_name);
	DDX_Text(pDX, IDC_EDIT_server_ip, m_server_ip);
}

BEGIN_MESSAGE_MAP(C_Argos_settingDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &C_Argos_settingDlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &C_Argos_settingDlg::OnBnClickedButton2)
END_MESSAGE_MAP()


// C_Argos_settingDlg 메시지 처리기

BOOL C_Argos_settingDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다. 응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void C_Argos_settingDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다. 문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void C_Argos_settingDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR C_Argos_settingDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void C_Argos_settingDlg::OnBnClickedButton1()
{

	char site_code[100] = {0};
	char site_name[100] = {0};
	char saveformat[100] = {0};
	char fileserver_ip[100] = {0};
	char license_path[100] = {0};
	char server_ip[100] = {0};
	char programpath[_MAX_PATH];

	UpdateData(TRUE);
	
	GetCurrentDirectory( _MAX_PATH, programpath);

	strcat_s(programpath,"\\setting.ini");

	GetPrivateProfileString("COMMON","site_code",NULL,site_code,sizeof(site_code),programpath);
	GetPrivateProfileString("COMMON","site_name",NULL,site_name,sizeof(site_name),programpath);
	GetPrivateProfileString("SAVE","SaveFormat",NULL,saveformat,sizeof(saveformat),programpath);
	GetPrivateProfileString("SENDER","fileserver_ip",NULL,fileserver_ip,sizeof(fileserver_ip),programpath);
	GetPrivateProfileString("SENDER","license_path",NULL,license_path,sizeof(license_path),programpath);
	GetPrivateProfileString("MANAGER","server_ip",NULL,server_ip,sizeof(server_ip),programpath);

	DWORD dwError = GetLastError();
	m_site_code=site_code;
	m_site_name=site_name;
	m_saveformat=saveformat;
	m_fileserver_ip=fileserver_ip;
	m_license_path=license_path;
	m_server_ip=server_ip;
	UpdateData(FALSE);

	
	int aaa = 0;
}



void C_Argos_settingDlg::OnBnClickedButton2()
{
	char site_code[100] = {0};
	char site_name[100] = {0};
	char saveformat[100] = {0};
	char fileserver_ip[100] = {0};
	char license_path[100] = {0};
	char server_ip[100] = {0};
	char programpath[_MAX_PATH];

	UpdateData(TRUE);
	
	GetCurrentDirectory( _MAX_PATH, programpath);

	strcpy(site_code,m_site_code);
	strcpy(site_name,m_site_name);
	strcpy(saveformat,m_saveformat);
	strcpy(fileserver_ip,m_fileserver_ip);
	strcpy(license_path,m_license_path);
	strcpy(server_ip,m_server_ip);

	strcat_s(programpath,"\\setting.ini");
	WritePrivateProfileString("COMMON","site_code",site_code,programpath);
	WritePrivateProfileString("COMMON","site_name",site_name,programpath);
	WritePrivateProfileString("SAVE","SaveFormat",saveformat,programpath);
	WritePrivateProfileString("SENDER","fileserver_ip",fileserver_ip,programpath);
	WritePrivateProfileString("SENDER","license_path",license_path,programpath);
	WritePrivateProfileString("MANAGER","server_ip",server_ip,programpath);
	UpdateData(FALSE);
}

